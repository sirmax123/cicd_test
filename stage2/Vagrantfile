
jenkins_roles_list = [
  'misc',
  'oracle_java',
]


jenkins_shell_scripts_pre_chef = [
  {
    'inline': 'echo PRE_CHEF_TEST_SCRIPT'
  },
  {
    'path': '01_add_maven_repo_and_install_maven.sh' 
  }
]
jenkins_shell_scripts_post_chef = [
  {
    'inline': 'whoami;  id; pwd'
  },
  {
    'path': '02_build_and_install_or_update_tomcat.sh' 
  },
  {
    'path': '03_build_and_deploy_petclinic.sh'
  } 
]

########

gitlab_roles_list = [
  'misc',
  'gitlab'
]
gitlab_shell_scripts_pre_chef = []
gitlab_shell_scripts_post_chef = []

########


default_packages_to_install = [
  'mc', 
  'telnet',
  'traceroute',
  'git',
  'redhat-lsb-core', 
  'rpmdevtools'
]


nodes = {
  jenkins: {
    cpus: '1',
    memory: '1024',
    instance_type: 'jenkins',
    box: 'centos/6',
    ip: '10.0.1.10',
    roles: jenkins_roles_list,
    'shell_scripts': [], 
  },
  gitlab: {
    cpus: '2',
    memory: '2048',
    instance_type: 'gitlab',
    box: 'centos/6',
    ip: '10.0.1.11',
    roles: gitlab_roles_list,
    'shell_scripts_pre_chef': gitlab_shell_scripts_pre_chef,
    'shell_scripts_post_chef': gitlab_shell_scripts_post_chef,
    'port_pairs': []
  }
}



app_config = {
  jenkins: {
    chef_json: {
      misc: {
        packages_to_install: default_packages_to_install,
      },
      jenkins: {
      }
    }
  },
  gitlab: {
    chef_json: {
      misc: {
        packages_to_install: default_packages_to_install,
      }
    }
  },
}




Vagrant.configure("2") do |config|
  config.vm.box = "centos/6"

  nodes.each do |nodename, nodedata|
    puts(nodename)
    current_config = app_config[:"#{nodename}"]
    puts(current_config)
    config.vm.define nodename do |current_node|


      current_node.vm.network 'private_network', ip: nodedata[:ip]
      current_node.vm.provision :hosts, :sync_hosts => true

      current_node.vm.provider 'virtualbox' do |v|
        if defined?(nodedata[:memory])
          v.memory = nodedata[:memory]
        end
        if defined?(nodedata[:cpus])
          v.cpus = nodedata[:cpus]
        end
      end

      if nodedata[:ports_pains].respond_to?('each')
        nodedata[:ports_pains].each do |port_pair| 
          current_node.vm.network "forwarded_port", guest: port_pair[:guest], host: port_pair[:host]
        end
      end      
              
      if nodedata[:shell_scripts_pre_chef].respond_to?('each')
        nodedata[:shell_scripts_pre_chef].each do |shell_script|
          puts(shell_script)
          shell_script.each do |method, script_code| 
            current_node.vm.provision "shell", "#{method}": script_code
          end
        end
      end
        
      current_node.vm.provision "chef_solo" do |chef|
        chef.cookbooks_path = ["cookbooks", "site-cookbooks"]
        chef.roles_path = ["roles"]
          
        nodedata[:roles].each do |current_role|
          chef.add_role(current_role)
          chef.json = current_config[:chef_json]
        end    
      end

      if nodedata[:shell_scripts_post_chef].respond_to?('each')
        nodedata[:shell_scripts_post_chef].each do |shell_script|
          puts(shell_script)
          shell_script.each do |method, script_code| 
            current_node.vm.provision "shell", "#{method}": script_code
          end
        end
      end 
    end
  end
end
