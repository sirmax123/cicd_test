sql_root_credentials = {
  user:     'root',
  password: 'r00tme',
  host:     '127.0.0.1'
}

sql_databases = {
  petclinic: {
    name: 'petclinic',
    username: 'petclinic',
    password: 'petclinic',
    allowed_hosts: [
    ]
  },
  other_petclinic: {
    name: 'other_petclinic',
    username: 'other_petclinic',
    password: 'other_petclinic',
    allowed_hosts: [
      '127.0.0.1', 
      '%'
    ]
  }
}


nodes = {
  all_in_one: {
    box: 'centos/6',
    ip: '10.0.1.200',
    roles: [
      'mysql_server', 
      'mysql_databases',
      'misc',
      'oracle_java',
      'petclinic_pre_configure',
      'frontend'
    ],
    'shell_scripts': [], 
    'ports_pains': []
  }
}


app_config = {
  all_in_one: {
    chef_json: {
      misc: {
        packages_to_install: [
          'mc', 
          'telnet',
          'traceroute',
          'git',
          'redhat-lsb-core', 
          'rpmdevtools'
        ]
      },
      database_creds: sql_databases[:petclinic],
      database_host: '127.0.0.1',
      mysql_server: {
        root_password:   sql_root_credentials[:password],
        bind_address:    '0.0.0.0',
        bind_port:       '3306',
        data_dir:        '/var/lib/mysql'
      },
      frontend: {
        backends:['127.0.0.1'],
        apache_modules: [
          "expires",
          "deflate",
          "headers",
          "usertrack",
          "setenvif",
          "mime",
          "dav",
          "status",
          "autoindex",
          "info",
          "vhost_alias",
          "negotiation",
          "dir",
          "speling",
          "userdir",
          "alias",
          "substitute",
          "rewrite",
          "proxy",
          "proxy_balancer",
          "proxy_ftp",
          "proxy_http",
          "proxy_ajp",
          "proxy_connect",
          "cache",
          "suexec",
          "disk_cache",
          "cgi",
          "version"
       ]
      }
    }
  }
}


Vagrant.configure("2") do |config|
  config.vm.box = "centos/6"

  nodes.each do |nodename, nodedata|
    puts(nodename)
    current_config = app_config[:"#{nodename}"]
    puts(current_config)
    config.vm.define nodename do |current_node|


      current_node.vm.network 'private_network', ip: nodedata[:ip]
      current_node.vm.provision :hosts, :sync_hosts => true

        
      if nodedata[:ports_pains].respond_to?('each')
        nodedata[:ports_pains].each do |port_pair| 
          current_node.vm.network "forwarded_port", guest: port_pair[:guest], host: port_pair[:host]
        end
      end      
              
      if nodedata[:shell_scripts_pre_chef].respond_to?('each')
        nodedata[:shell_scripts_pre_chef].each do |shell_script|
          puts(shell_script)
          shell_script.each do |method, script_code| 
            current_node.vm.provision "shell", "#{method}": script_code
          end
        end
      end
        
      current_node.vm.provision "chef_solo" do |chef|
        chef.cookbooks_path = ["cookbooks", "site-cookbooks"]
        chef.roles_path = ["roles"]
          
        nodedata[:roles].each do |current_role|
          chef.add_role(current_role)
          chef.json = current_config[:chef_json]
        end    
      end

      if nodedata[:shell_scripts_post_chef].respond_to?('each')
        nodedata[:shell_scripts_post_chef].each do |shell_script|
          puts(shell_script)
          shell_script.each do |method, script_code| 
            current_node.vm.provision "shell", "#{method}": script_code
          end
        end
      end 
    end
  end
end
